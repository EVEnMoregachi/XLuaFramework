local base_smg = Class()

-- 消息注册
function base_smg:add_req_res(msg_name, msg_id, ...)
    local keys = {...}
    -- 消息请求
    self["req_"..msg_name] = function(self, ...)
        local values = {...}
        if #keys ~= #values then
            Log.Error("参数不正确：", msg_name)
        end
        local send_date = {}
        for i = 1, #keys do
            send_date[keys[i]] = values[i]
        end
        msg_mgr.send_msg(msg_id, send_date)
    end

    -- 消息接收 如果这个类有方法res_xxx
    if type(self["res_"..msg_name]) == "function" then
        msg_mgr.register(msg_id, 
            -- 回调
            function (date)
                local msg = Json.decode(date)
                if msg.code ~= 0 then
                    Log.Error("错误码：" , msg.code)
                    return
                end
                self["res_"..msg_name](self, msg)
            end)
    else
        Log.Error("请注册消息返回回调：" ..msg_name)
    end
end

return base_smg

--使用方法：写一个类继承自base_msg,然后重写ctor构造函数，
--注册消息请求的name id 和参数 调用的时候从msg_mgr的msg_model_list中取出并且实列化一个需要用的类
--然后使用  req_+<注册消息请求的name>方法  传入具体的id和参数

--注册响应的时候，就是子类中写一个方法 res_xxx，在msg_mgr.init的时候就会一步步调用到base_smg:add_req_res
--这里会注册res_xxx到msg_response(回调方法列表)
--服务器发送回应后，msg_mgr会在msg_response  中查找是否注册了对应的消息
--如果注册了，那么触发msg_mgr.register注册的回调方法 也就是res_xxx